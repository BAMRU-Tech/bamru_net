"""
Django settings for bamru_net project.

Generated by 'django-admin startproject' using Django 2.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import raven
from distutils.util import strtobool
from dotenv import load_dotenv, find_dotenv
load_dotenv(find_dotenv())

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'main/static'),
)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['DJANGO_SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = strtobool(os.environ['DJANGO_DEBUG'])

ALLOWED_HOSTS = os.environ['DJANGO_ALLOWED_HOST'].split(',') + ['localhost', ]


# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_twilio',
    'anymail',
    'bootstrap4',
    'django_filters',
    'oidc_provider',
    'raven.contrib.django.raven_compat',
    'rest_framework',
    'main',
    'main.templatetags.filters',
    'django.contrib.admin',  # Must be after main for templates
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    )
}

ROOT_URLCONF = 'bamru_net.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'main.context_processors.dsn',
            ],
        },
    },
]

WSGI_APPLICATION = 'bamru_net.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ['DJANGO_DB_NAME'],
        'USER': os.environ['DJANGO_DB_USER'],
        'PASSWORD': os.environ['DJANGO_DB_PASS'],
        'HOST': os.environ['DJANGO_DB_HOST'],
    }
}

AUTH_USER_MODEL = 'main.Member'

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.Argon2PasswordHasher',
]

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Los_Angeles'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.environ.get('DJANGO_STATIC_ROOT')

MEDIA_URL = '/system/'
MEDIA_ROOT = os.environ.get('MEDIA_ROOT', 'system/')

LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'
OIDC_USERINFO = 'main.oidc_provider_settings.userinfo'

# Raven config for Sentry.io logging
RELEASE = raven.fetch_git_sha(os.path.abspath(BASE_DIR))
if strtobool(os.environ.get('USE_RAVEN', 'False')):
    RAVEN_CONFIG = {
        'dsn': os.environ['RAVEN_DSN'],
        # If you are using git, you can also automatically configure the
        # release based on the git info.
        'release': RELEASE,
    }
JAVASCRIPT_DSN = os.environ.get('JAVASCRIPT_DSN','')

TWILIO_SMS_FROM = [e.strip() for e in os.environ['TWILIO_SMS_FROM'].split(',')]
HOSTNAME = os.environ['DJANGO_HOSTNAME']
# Needed for django-oidc-provider
SITE_URL = '{}://{}'.format(os.environ.get('DJANGO_SCHEMA', 'https'), HOSTNAME)

WIKI_URL = os.environ.get('WIKI_URL', '')

# Temporary fix for #128
DJANGO_TWILIO_FORGERY_PROTECTION=False

if os.environ.get('MESSAGE_FILE_PATH'):
    EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
    EMAIL_FILE_PATH = os.environ['MESSAGE_FILE_PATH']
    SMS_FILE_PATH = EMAIL_FILE_PATH
else:
    EMAIL_BACKEND = "anymail.backends.mailgun.EmailBackend"
    SMS_FILE_PATH = None

ANYMAIL = {
    'WEBHOOK_SECRET': os.environ['MAILGUN_WEBHOOK_SECRET'],
    'MAILGUN_API_KEY': os.environ['MAILGUN_API_KEY'],
}
MAILGUN_EMAIL_FROM = os.environ['MAILGUN_EMAIL_FROM']
DEFAULT_FROM_EMAIL = os.environ['MAILGUN_EMAIL_FROM']

GOOGLE_CREDENTIALS_FILE = os.environ.get('GOOGLE_CREDENTIALS_FILE', '')
GOOGLE_TOKEN_FILE = os.environ.get('GOOGLE_TOKEN_FILE', '')
GOOGLE_CALENDAR_ID = os.environ.get('GOOGLE_CALENDAR_ID', '')

CELERY_BROKER_URL = os.environ['CELERY_BROKER_URL']
CELERYD_HIJACK_ROOT_LOGGER = False
# Add a five-minute timeout to all Celery tasks.
CELERYD_TASK_SOFT_TIME_LIMIT = 300

WIKI_BASE_URL = os.environ.get('WIKI_BASE_URL', '')
WIKI_SSH_DEST = os.environ.get('WIKI_SSH_DEST', '')
WIKI_SSH_KEY = os.environ.get('WIKI_SSH_KEY', '')
WIKI_AUTH_DIR = os.environ.get('WIKI_AUTH_DIR', '')

if os.environ.get('PROXY_HTTPS'):
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')


from django.utils.log import DEFAULT_LOGGING
LOG_ROOT = os.environ['LOG_ROOT']
LOGGING_CONFIG = None
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'root': {
        'level': 'WARNING',
        'handlers': ['sentry'],
    },
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(name)s:%(module)s:%(lineno)d '
                      '%(process)d %(thread)d %(message)s'
        },
        'django.server': DEFAULT_LOGGING['formatters']['django.server'],
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'verbose',
            'filename': os.path.join(LOG_ROOT, 'django.log'),
            'maxBytes': 10 * 1024 * 1024,  # 10 MB
            'backupCount': 90,
        },
        'sentry': {
            'level': 'WARNING',
            'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        'django.server': DEFAULT_LOGGING['handlers']['django.server'],
    },
    'loggers': {
        'django.db.backends': {
            'level': 'ERROR',
            'handlers': ['console'],
            'propagate': False,
        },
        'raven': {
            'level': 'DEBUG',
            'handlers': ['console'],
            'propagate': False,
        },
        'sentry.errors': {
            'level': 'DEBUG',
            'handlers': ['console'],
            'propagate': False,
        },
        'celery': {
            'level': 'WARNING',
            'handlers': ['sentry'],
            'propagate': False,
        },
        # Default runserver request logging
        'django.server': DEFAULT_LOGGING['loggers']['django.server'],
        # Project logging
        'main': {
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'handlers': ['console', 'sentry', 'file'],
            'propagate': False,
        },
    },
}

import logging.config
logging.config.dictConfig(LOGGING)
